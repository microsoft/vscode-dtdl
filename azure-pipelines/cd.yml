trigger:
  tags:
    include:
    - v*

pr: none

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

variables:
- template: common/variables.yml

steps:

  - template: common/setup_steps.yml
  - template: common/compile_steps.yml
  - template: common/check_steps.yml
  - template: common/test_steps.yml

  # setting flag variables is_r, is_rc
  - bash: |
      rc_tag_regex=^refs\/tags\/v?[0-9]+\.[0-9]+\.[0-9]+-[Rr][Cc]
      r_tag_regex=^refs\/tags\/v?[0-9]+\.[0-9]+\.[0-9]+$

      [[ $BUILD_SOURCEBRANCH =~ $rc_tag_regex ]] && is_rc=true
      [[ $BUILD_SOURCEBRANCH =~ $r_tag_regex ]] && is_r=true

      echo "##vso[task.setvariable variable=is_rc]$is_rc"
      echo "##vso[task.setvariable variable=is_r]$is_r"
    displayName: Setting flag variable is_rc is_r

  # try to remove trailing rc for package.json
  - script: |
      node scripts/removeTrailingRc.js
    displayName: Try to remove trailing rc for package.version

  # modify package.json for release candidates
  - script: |
      node scripts/modifyPackageJson.js name $(test_extension_name) displayName "$(test_display_name)" aiKey ${TEST_AIKEY} publisher $(test_publisher)
    displayName: Modify package.json for release candidates
    condition: and(succeeded(), eq(variables['is_rc'], 'true'))

  # modify package.json for releases
  - script: |
      node scripts/modifyPackageJson.js aiKey ${PROD_AIKEY}
    displayName: Modify package.json for release candidates
    condition: and(succeeded(), eq(variables['is_r'], 'true'))

  # generate vsix file
  - template: common/genvsix_steps.yml

  # release to github
  # 1. copy vsix file to staging dir
  # 2. do GitHubRelease
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: |
        **/*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: GitHubRelease@0
    displayName: Deploy Releases or Release Candidates to GitHub Release
    inputs:
      gitHubConnection: 'github_release_pat_for_pnp_authoring'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      isPreRelease: $(is_rc)
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  # publish vsix to marketplace for releases
  - bash: vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: Deploy releases to marketplace
    condition: and(succeeded(), eq(variables['is_r'], 'true'), eq(variables['Agent.OS'], 'Linux'))
    env:
      MARKETPLACE_TOKEN: $(vsciot_marketplace_token)

  # publish vsix to marketplace for release candidates
  - bash: yes | vsce unpublish -p $MARKETPLACE_TOKEN $(test_publisher).$(test_extension_name) && vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: Deploy release candidates to marketplace
    condition: and(succeeded(), eq(variables['is_rc'], 'true'), eq(variables['Agent.OS'], 'Linux'))
    env:
      MARKETPLACE_TOKEN: $(iotdevexbuild_marketplace_token)
